<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="_insert_update_delete">public int dml명령(${argType} vo) {&#13;
		// TODO Auto-generated method stub&#13;
		int res = 0;//처리된 행수&#13;
		Connection conn = null;&#13;
		PreparedStatement pstmt = null; &#13;
		String sql = "";&#13;
		&#13;
		try {&#13;
			//1.Connection획득&#13;
			conn = DBService.getInstance().getConnection();&#13;
			//2.명령처리객체 획득&#13;
			pstmt = conn.prepareStatement(sql);&#13;
			&#13;
			//3.psmt parameter 설정&#13;
			&#13;
			&#13;
			//4.DB insert&#13;
			res = pstmt.executeUpdate(); // insert update delete&#13;
			&#13;
		} catch (Exception e) {&#13;
			// TODO: handle exception&#13;
				e.printStackTrace();&#13;
		} finally {&#13;
			&#13;
			try {&#13;
				if(pstmt!=null) pstmt.close();&#13;
				if(conn!=null) conn.close();&#13;
			} catch (SQLException e) {&#13;
				// TODO Auto-generated catch block&#13;
				e.printStackTrace();&#13;
			}&#13;
		}&#13;
		&#13;
		return res;&#13;
	}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="_select_list">public List&lt;${argType}&gt; selectList(){&#13;
		&#13;
        List&lt;${argType}&gt; list = new ArrayList&lt;${argType}&gt;();&#13;
		Connection conn = null;&#13;
		PreparedStatement pstmt = null;&#13;
		ResultSet rs = null;&#13;
		String sql = "";&#13;
		&#13;
		try{&#13;
			//1.Connection획득&#13;
			conn = DBService.getInstance().getConnection();&#13;
			&#13;
			//2.명령처리(PreparedStatement)객체 획득&#13;
			pstmt = conn.prepareStatement(sql);&#13;
			&#13;
			//3.결과행처리(ResultSet)객체 획득&#13;
			rs = pstmt.executeQuery();&#13;
			&#13;
			//전체행 처리&#13;
			while(rs.next()) {&#13;
				&#13;
				//rs의 현재 레코드의 값을 읽어오기&#13;
				//${argType}에 포장&#13;
				${argType} vo = new ${argType}();&#13;
				&#13;
				&#13;
				//ArrayList담는다&#13;
				list.add(vo);&#13;
			}&#13;
			&#13;
		}catch (Exception e) {&#13;
			// TODO: handle exception&#13;
			e.printStackTrace();&#13;
		}finally {&#13;
			&#13;
			try {&#13;
				//닫기:역순으로&#13;
				if(rs!=null) rs.close();&#13;
				if(pstmt!=null)pstmt.close();&#13;
				if(conn!=null)conn.close();&#13;
			} catch (SQLException e) {&#13;
				// TODO Auto-generated catch block&#13;
				e.printStackTrace();&#13;
			}&#13;
		}&#13;
		return list;&#13;
	}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="_selectOne">public ${argType} selectOne(){&#13;
		&#13;
    	${argType} vo = null;&#13;
		Connection conn = null;&#13;
		PreparedStatement pstmt = null;&#13;
		ResultSet rs = null;&#13;
		String sql = "";&#13;
		&#13;
		try{&#13;
			//1.Connection획득&#13;
			conn = DBService.getInstance().getConnection();&#13;
			&#13;
			//2.명령처리(PreparedStatement)객체 획득&#13;
			pstmt = conn.prepareStatement(sql);&#13;
			&#13;
			//3.결과행처리(ResultSet)객체 획득&#13;
			rs = pstmt.executeQuery();&#13;
			&#13;
			//전체행 처리&#13;
			while(rs.next()) {&#13;
				&#13;
				//rs의 현재 레코드의 값을 읽어오기&#13;
				//${argType}에 포장&#13;
				vo = new ${argType}();&#13;
				&#13;
				&#13;
				//ArrayList담는다&#13;
			}&#13;
			&#13;
		}catch (Exception e) {&#13;
			// TODO: handle exception&#13;
			e.printStackTrace();&#13;
		}finally {&#13;
			&#13;
			try {&#13;
				//닫기:역순으로&#13;
				if(rs!=null) rs.close();&#13;
				if(pstmt!=null)pstmt.close();&#13;
				if(conn!=null)conn.close();&#13;
			} catch (SQLException e) {&#13;
				// TODO Auto-generated catch block&#13;
				e.printStackTrace();&#13;
			}&#13;
		}&#13;
		return vo;&#13;
	}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="_servlet">&#13;
/**&#13;
 * Servlet implementation class SungDeleteAction&#13;
 */&#13;
import java.io.IOException;&#13;
&#13;
import javax.servlet.ServletException;&#13;
import javax.servlet.annotation.WebServlet;&#13;
import javax.servlet.http.HttpServlet;&#13;
import javax.servlet.http.HttpServletRequest;&#13;
import javax.servlet.http.HttpServletResponse;&#13;
import javax.servlet.RequestDispatcher;&#13;
/**&#13;
 * Servlet implementation class SungDeleteAction&#13;
 */&#13;
@WebServlet("")&#13;
public class ${primary_type_name} extends HttpServlet {&#13;
	private static final long serialVersionUID = 1L;&#13;
&#13;
	/**&#13;
	 * @see HttpServlet#service(HttpServletRequest request, HttpServletResponse response)&#13;
	 */&#13;
	protected void service(HttpServletRequest request, HttpServletResponse response)&#13;
			throws ServletException, IOException {&#13;
		// TODO Auto-generated method stub&#13;
&#13;
		String forward_page = "";&#13;
		RequestDispatcher disp = request.getRequestDispatcher(forward_page);&#13;
		disp.forward(request, response);&#13;
&#13;
	}&#13;
&#13;
}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="_singleton">	//single-ton pattern: 1개의 객체만 생성해서 서비스하자&#13;
	static ${primary_type_name} single=null;&#13;
	public static ${primary_type_name} getInstance(){&#13;
		if(single==null)&#13;
			single = new ${primary_type_name}();&#13;
		return single;&#13;
	}&#13;
	&#13;
	public ${primary_type_name}() {&#13;
		// TODO Auto-generated constructor stub&#13;
	}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="_swing">import javax.swing.JFrame;&#13;
&#13;
//  awt -&gt;확장 -&gt; swing&#13;
//  Frame         JFrame&#13;
&#13;
public class ${primary_type_name} extends JFrame{&#13;
	&#13;
	public ${primary_type_name}() {&#13;
		// TODO Auto-generated constructor stub&#13;
		super("내가만든 윈도우");&#13;
		&#13;
		//위치&#13;
		//this.setLocation(200, 100);&#13;
		//크기지정&#13;
		//this.setSize(400, 300);&#13;
		&#13;
		// 위치 + 크기정보&#13;
		this.setBounds(200, 100, 400, 300);&#13;
		&#13;
		//보여줘라&#13;
		this.setVisible(true);&#13;
		&#13;
		//종료코드&#13;
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);&#13;
		&#13;
	}&#13;
&#13;
	public static void main(String[] args) {&#13;
		// TODO Auto-generated method stub&#13;
		new ${primary_type_name}();	&#13;
	}&#13;
&#13;
}</template></templates>